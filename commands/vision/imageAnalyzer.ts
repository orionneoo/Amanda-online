import { WAMessage, downloadMediaMessage } from '@whiskeysockets/baileys';
import * as dotenv from 'dotenv';
import fetch from 'node-fetch';
import path from 'path';
import fs from 'fs';

dotenv.config();

const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent';
const PERSON_DIR = './PersonBOT';
const DEFAULT_CONFIG = path.join(PERSON_DIR, 'sys_inst.default.config');
const PM_CONFIG = path.join(PERSON_DIR, 'sys_inst.light.config');

interface GeminiResponse {
    candidates?: Array<{
        content?: {
            parts?: Array<{
                text?: string;
            }>;
        };
    }>;
    error?: {
        message?: string;
    };
}

function readSystemInstructions(configFile: string): string {
    try {
        if (!fs.existsSync(configFile)) {
            console.log(`‚ö†Ô∏è Arquivo de configura√ß√£o ${configFile} n√£o encontrado, usando padr√£o`);
            return fs.readFileSync(DEFAULT_CONFIG, 'utf8');
        }
        return fs.readFileSync(configFile, 'utf8');
    } catch (error) {
        console.error('‚ùå Erro ao ler instru√ß√µes:', error);
        return '';
    }
}

export async function analyzeImage(msg: WAMessage, sock: any): Promise<string> {
    try {
        console.log('üîç Iniciando an√°lise de imagem com Gemini 2.0 Flash...');
        
        // Verifica se √© grupo ou privado
        const isGroup = msg.key.remoteJid?.endsWith('@g.us');
        const jid = msg.key.remoteJid;
        
        // Carrega as instru√ß√µes de personalidade
        const configFileName = isGroup ? `sys_inst.${jid}.config` : 'sys_inst.light.config';
        const configFile = path.join(PERSON_DIR, configFileName);
        const personality = readSystemInstructions(configFile);
        
        if (!personality) {
            throw new Error('N√£o foi poss√≠vel carregar as instru√ß√µes de personalidade');
        }

        // Verifica se h√° uma imagem na mensagem (direta ou em resposta)
        let targetMsg = msg;
        
        // Se for uma resposta a uma mensagem com imagem
        if (msg.message?.extendedTextMessage?.contextInfo?.quotedMessage?.imageMessage) {
            console.log('üì∏ Imagem encontrada em mensagem respondida');
            targetMsg = {
                ...msg,
                message: {
                    ...msg.message.extendedTextMessage.contextInfo.quotedMessage
                }
            };
        }

        // Verifica se h√° uma imagem para analisar
        if (!targetMsg.message?.imageMessage) {
            console.log('‚ùå Nenhuma imagem encontrada para an√°lise');
            return '‚ùå N√£o encontrei nenhuma imagem para analisar. Por favor, envie uma imagem ou responda a uma mensagem com imagem.';
        }

        // Baixa a imagem
        console.log('‚¨áÔ∏è Baixando imagem...');
        const imageBuffer = await downloadImage(targetMsg, sock);
        if (!imageBuffer) {
            console.log('‚ùå Falha ao baixar imagem');
            return '‚ùå N√£o consegui baixar a imagem. Por favor, tente novamente.';
        }

        // Converte o buffer da imagem para base64
        const imageBase64 = imageBuffer.toString('base64');
        const mimeType = targetMsg.message.imageMessage.mimetype || 'image/jpeg';

        // Prepara o prompt personalizado para o Gemini Flash
        const prompt = {
            contents: [
                {
                    parts: [
                        {
                            text: `${personality}\n\nVoc√™ √© uma IA especializada em an√°lise de imagens. Mantenha sua personalidade ao descrever a imagem a seguir. Descreva de forma envolvente, mantendo o tom de voz e caracter√≠sticas definidas acima. Inclua detalhes sobre elementos principais, cores, a√ß√µes e ambiente.`
                        },
                        {
                            inline_data: {
                                mime_type: mimeType,
                                data: imageBase64
                            }
                        }
                    ]
                }
            ],
            generationConfig: {
                temperature: 0.7,
                topK: 40,
                topP: 0.8,
                maxOutputTokens: 500
            }
        };

        // Faz a requisi√ß√£o para a API do Gemini Flash
        console.log('ü§ñ Enviando imagem para an√°lise r√°pida...');
        const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(prompt)
        });

        if (!response.ok) {
            const errorText = await response.text();
            console.error('‚ùå Erro na resposta da API:', errorText);
            throw new Error(`Erro na API do Gemini Flash: ${response.status} - ${errorText}`);
        }

        const data: GeminiResponse = await response.json();
        
        // Verifica se h√° erro na resposta
        if (data.error) {
            console.error('‚ùå Erro retornado pela API:', data.error);
            throw new Error(data.error.message || 'Erro desconhecido na API do Gemini');
        }

        // Verifica se h√° resposta v√°lida
        if (!data.candidates?.[0]?.content?.parts?.[0]?.text) {
            console.log('‚ùå Resposta da API n√£o cont√©m an√°lise');
            throw new Error('A API n√£o retornou uma an√°lise v√°lida');
        }

        console.log('‚úÖ An√°lise personalizada conclu√≠da com sucesso');
        
        // Formata a resposta de acordo com o tipo de chat
        const response_text = data.candidates[0].content.parts[0].text;
        if (isGroup) {
            return `üñºÔ∏è *An√°lise da Imagem*\n\n${response_text}`;
        } else {
            return response_text; // No privado, envia s√≥ o texto para ser mais casual
        }

    } catch (error) {
        console.error('‚ùå Erro ao analisar imagem:', error);
        if (error instanceof Error) {
            return `‚ùå Erro ao analisar a imagem: ${error.message}`;
        }
        return '‚ùå Ocorreu um erro ao analisar a imagem. Por favor, tente novamente.';
    }
}

async function downloadImage(msg: WAMessage, sock: any): Promise<Buffer | null> {
    try {
        console.log('‚¨áÔ∏è Iniciando download da imagem...');
        const buffer = await downloadMediaMessage(
            msg,
            'buffer',
            {},
            {
                logger: sock.logger,
                reuploadRequest: sock.updateMediaMessage
            }
        );
        console.log('‚úÖ Download da imagem conclu√≠do');
        return buffer as Buffer;
    } catch (error) {
        console.error('‚ùå Erro ao baixar imagem:', error);
        return null;
    }
} 