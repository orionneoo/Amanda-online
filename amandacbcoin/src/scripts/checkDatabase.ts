import { MongoClient } from 'mongodb';
import * as dotenv from 'dotenv';

dotenv.config();

async function checkDatabase() {
    const uri = process.env.MONGODB_URI;
    
    if (!uri) {
        console.error('‚ùå MONGODB_URI n√£o encontrada no arquivo .env');
        process.exit(1);
    }

    console.log('üîç Verificando conex√£o com MongoDB Atlas...');
    
    const client = new MongoClient(uri);

    try {
        await client.connect();
        console.log('‚úÖ Conex√£o estabelecida com sucesso!');

        const db = client.db('AmandaeCBcoin');
        console.log('\nüìä Informa√ß√µes do banco de dados:');
        
        // Lista todas as cole√ß√µes
        const collections = await db.listCollections().toArray();
        console.log('\nüìÅ Cole√ß√µes encontradas:');
        for (const collection of collections) {
            console.log(`- ${collection.name}`);
            
            // Conta documentos em cada cole√ß√£o
            const count = await db.collection(collection.name).countDocuments();
            console.log(`  ‚îî‚îÄ ${count} documentos`);
            
            // Mostra um exemplo de documento
            if (count > 0) {
                const sample = await db.collection(collection.name).findOne();
                console.log('  ‚îî‚îÄ Exemplo de documento:');
                console.log('     ', JSON.stringify(sample, null, 2).replace(/\n/g, '\n      '));
            }
            console.log();
        }

        // Verifica √≠ndices da cole√ß√£o users
        const usersCollection = db.collection('users');
        const indexes = await usersCollection.indexes();
        console.log('\nüîë √çndices da cole√ß√£o users:');
        console.log(JSON.stringify(indexes, null, 2));

    } catch (error) {
        console.error('‚ùå Erro ao conectar ao MongoDB:', error);
    } finally {
        await client.close();
        console.log('\nüîå Conex√£o fechada');
    }
}

checkDatabase().catch(console.error); 